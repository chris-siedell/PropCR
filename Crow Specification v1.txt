======================================
"Crow Specification v1.txt"
21 May 2017 - Chris Siedell
http://siedell.com/projects/Crow/
======================================


Crow is low-level command-response transport protocol. It was designed to help build useful higher-level protocols for communications between a PC and one or more microcontrollers. A Crow implementation takes care of the low-level transport details (packetization, error detection, etc.) so that user code (the higher-level protocol) can focus on issuing and executing commands.


Summary
=======

    - Crow is a command-response protocol, where only the host (e.g. PC) can initiate communications.
    - It supports up to 31 addressable devices (e.g. microcontrollers).
    - It supports broadcast commands.
    - Devices ignore commands for protocols that they don't support, reducing the hazard of sending inappropriate commands.
    - Devices may send more than one response to a command, effectively allowing them to stream data to the host.
    - It can be used wirelessly or over one wire, since only one entity (host or device) should be transmitting at a time.
    - Device discovery is possible if implementations include the admin commands ping and getDeviceInfo, defined by this specification.


Some Definitions
================

The _host_ (e.g. a PC) issues commands. A _device_ (e.g. a microcontroller) sends one or more responses after receiving a command.

The command-response cycle is a called a _transaction_, and there can be only one transaction at a time. Only the host can initiate a transaction.

A _network_ consists of a shared communications channel used by one host and 1 to 31 uniquely addressed devices. Only one entity (device or host) should be using the channel at a time.

An _implementation_ is usable code that conforms to this specification. There are host implementations, and device implementations.

_User code_ refers to the code that uses a Crow implementation to create a higher-level protocol, both on the host and device. User code on the host calls an implementation function to send a _user command_. This command is received by a device, and then the device's implementation invokes user code to process that command. The user code on the device then calls the implementation to send a response, and the host implementation receives that response and presents it to the host's user code.


Transactions
============

A transaction begins when the host starts sending a command. If no response is expected (see "Muted Responses") then the transaction ends as soon as the command is fully sent. If a response is expected then the transaction ends as soon as the final response is fully received, or when the host determines that the transaction has timed-out (which is host implementation defined).


Device Addresses
================

There can be up to 31 uniquely addressed devices on the network (addresses 1 to 31 -- but see next paragraph). The host has the choice to issue a command to a specific device, or to all devices (broadcast). Address 0 is used to designate a broadcast command. All broadcast commands must have muted responses (see below), so there are never responses to a broadcast command.

Multiple devices can share the same address only if it can be guaranteed that at most one will respond to a command. One way to enforce this is to always mute commands. Another way is to include a sub-address within the payload and have user code respond only if it matches a device's sub-address. This second approach would allow user code to expand the possible address space beyond 31 devices (the upper level protocol would have to be designed specifically to include this functionality).


Muted Responses
===============

The host has the option to mute responses (this is mandatory for broadcast commands). In this case the device will receive the command but it must not respond to it.


Protocol Numbers
================

Crow is meant to be used to build more advanced protocols, and these protocols are identified by a two byte protocol number. A device implementation keeps a list of a supported protocols. When a command is sent it includes a protocol number, and if that number is not in the list of supported protocols the device ignores the command. Devices may support multiple protocols.

The protocols supported by a device may be discovered using the getDeviceInfo admin command (described below).


Command Type
============

There are two types of command: admin and user. Admin commands are for the administration of the Crow level (e.g. pinging, getting device information, changing the baudrate, etc.).

User commands are the whole purpose of Crow -- when an implementation receives a valid user command it invokes user code to process it.

Note that admin and user commands have separate protocol spaces. Admin protocol numbers 0-15 have been reserved (see "Admin Commands" below). There are no reserved user protocol numbers. However, user protocol 0 is a special value in that it decreases the command packet header from 8 to 6 bytes (see "The Command Header" below).


Payload
=======

Commands and responses include a payload, which a Crow implementation treats as a binary blob. A payload may have 0 to 2047 bytes.

A device is not required to support a full payload for either commands or responses. If a command's payload exceeds the device's capacity an implementation has two options:
    - ignore the command and send no response, or
    - notify user code that a truncated payload has arrived and let user code decide whether to send a response.

A host may obtain the device's maximum command payload length by sending a getDeviceInfo admin command (see "Admin Command: getDeviceInfo").

A host must support a full payload response. The maximum payload length was chosen so that a complete packet is less than the default buffer size of the FTDI USB-Serial drivers (4096 bytes).


Responses
=========

Responses are allowed only if a valid command is received (see "A Valid Command" below) and responses to that command are not muted.

Responses are of two kinds: intermediate and final. A device may send any number (including zero) of intermediate responses, but it must send just one final response.

Failure to send a response when expected (when responses are not muted) will manifest as a timeout error for the host.


Command and Response Parameters
===============================

To summarize the sections above, a command has the following parameters:

    - address: 0-31 (0 is broadcast)
    - muted responses: yes/no
    - type: admin/user
    - protocol: 0x0000 - 0xffff
    - payload: <binary blob of length 0 - 2047>

A response has the following parameters:

    - final: yes/no
    - payload: <binary blob of length 0 - 2047>

See "The Command Header" and "The Response Header" sections below for details on how these parameters are actually packetized.


Error Detection
===============

Fletcher 16 is used for error detection. If an error is detected by a device then it must not respond.

Fletcher 16 was chosen since it is very simple to compute (allowing higher throughput on slower devices). If there is a Crow v2 it will probably include the option to use a more robust CRC.

Error detection works slightly differently in the command and response packets. In the command packets the error detection bytes are reported as check bytes, which should cause the running Fletcher 16 checksum to evaluate to zero. In the response packets the Fletcher 16 checksum up to that point is sent (and it is reset to zero after sending). This difference is designed to minimize the burden on devices.


Crow-Level Errors
=================

If a Crow implementation encounters any kind of error -- invalid commands, unexpected data, framing errors, etc. -- it must not send a response. There are no error responses at the Crow level (upper level protocols can, and probably should, define error responses).

The rationale for not having Crow-level error responses is that a device should not be using the communications channel unless it 'owns' the channel. It is still possible for a device to violate this rule if it sends a response after the host determines that a transaction has timed-out. This situation can be avoided by setting a sufficient timeout interval at the host, and by the device sending prompt responses. See "Design Considerations" for further suggestions.


Packetization
=============

Commands and responses are sent in packets. Both types of packet have a header followed by a body. The body -- which may be empty -- contains the payload, and has a nearly identical format for both kinds of packets, described in "The Packet Body".


The Packet Token
================

Command and response packets contain a hidden parameter: the token. The token helps the host match responses to commands. A device must send the same value with its responses as was sent with the original command -- otherwise, the token's value is meaningless. The host implementation should change the token value with each transaction.


The Command Header
==================

A command header consists of 6 or 8 bytes with the following format:

               |7|6|5|4|3|2|1|0|
         ------|---------------|
          CH0  |0|1|0|T|0| Lu  |
          CH1  |      Ll       |
          CH2  |       K       |
          CH3  |X|M|0|    A    |
         (CH4) |      Pu       |
         (CH5) |      Pl       |
          CH6  |      C0       |
          CH7  |      C1       |

The fields have the following definitions:

    L = Lu << 8 | Ll = payload length (0-2047 bytes, exclusive of error detection bytes)
    T = command type: 0 - admin,
                      1 - user
    K = token, a byte that the device must send with all responses to this command
    A = address (0-31)
    M = muted responses flag: 0 - response expected,
                              1 - responses forbidden (must be set if address = 0)
    X = protocol specified: 0 - none specified, so use implicit value of 0; no CH4 and CH5 bytes
                            1 - protocol is specified in bytes CH4 and CH5, to follow
    P = Pu << 8 | Pl = protocol number, if X=1 (if X=0 P is implicitly set to 0)
    C0, C1 = check bytes that cause the running Fletcher 16 checksum to evaluate to zero if initialized to zero before CH0.

Several bits are reserved and must have the values shown. Specifically, these are:
    - CH0 bit 3 = 0,
    - CH0 bits 5-7 = 0b010, and
    - CH3 bit 5  = 0.
Having these reserved bits...
    - ensures that stream of all 0x00 or all 0xff bytes can't be parsed as a valid header,
    - lets a device parser abort at the first byte 93% of the time for a random stream,
    - uniquely identifies command and response packets, and
    - provides a starting point for protocol enhancements.


The Response Header
===================

A response header is always 5 bytes and has the following format:

                |7|6|5|4|3|2|1|0|
          ------|---------------|
           RH0  |1|0|0|F|0| Lu  |
           RH1  |      Ll       |
           RH2  |       K       |
           RH3  |      Fu       |
           RH4  |      Fl       |

The fields have the following definitions:

    L = Lu << 8 | Ll = payload length (0-2047 bytes, exclusive of error detection bytes)
    F = final flag: 0 - intermediate response
                    1 - final response
    K = token, the same value that was sent by the host with the command
    Fu, Fl - The Fletcher 16 checksum after being initialized to zero and processing bytes RH0-RH2. Fu is the upper sum, and Fl is the lower sum.

Bits 3 and 5-7 of RH0 are reserved and must be 0 and 0b100.


The Packet Body
===============

If the payload is empty the body is also empty -- the packet will consist only of header bytes.

Otherwise, the body consists of the payload data transmitted within chunks. Each chunk consists of up to 128 bytes of payload data followed by two error detection bytes (see next paragraph). Chunks are 130 bytes each except for the last chunk, which may be 3 to 130 bytes.

As discussed in the "Error Detection" section, command and response packets use the Fletcher 16 checksum differently. In a command packet the two error detection bytes will be check bytes that cause the running Fletcher 16 checksum to evaluate to zero. In a response packet they will be a report of the Fletcher 16 checksum for the payload bytes of the chunk (with the upper sum sent before the lower sum, as in the response header). In both cases the checksum is initialized to zero before processing each chunk (this happens automatically due to the check bytes when receiving a command).

Here is a formula for determining the body length for a given payload length:

        numChunks = floor( payloadLength / 128 )
        if (payloadLength % 128 != 0) numChunks += 1
        bodyLength = payloadLength + 2*numChunks


A Valid Command
===============

A command is valid if all of the following statements are true:

    - All the bytes were received in a timely manner (device-implementation defined).
    - The command packet has a valid header according to the format described above.
    - The payload does not exceed the device's limit (so it will not be truncated).
    - The command is a broadcast command, or was addressed to the given device.
    - Responses are muted if it is a broadcast command.
    - The protocol number matches one of the device's supported protocol numbers.
    - The header was followed by a body with the correct length (described above).
    - No errors were detected in the body.


A Valid Response
================

A response is valid if all of the following statements are true:

    - It arrived during a transaction (not after a muted command, not after a final response, and not after the transaction has timed-out).
    - All the bytes were received in a timely manner (host-implementation defined).
    - The response packet has a valid header according to the format described above.
    - The token matches the token sent with the command.
    - The header was followed by a body with the correct length.
    - No errors were detected in the body.


Design Considerations
=====================

A host has a timeout after which it regards the transaction as over. Late responses are considered invalid and are ignored. If a device has a command which may take a significant or indeterminate amount of time to complete you may want to have the device first send an intermediate response before performing the work. This initial response could also include a time estimate so that the host can adjust its timeout settings. Additional intermediate responses can be sent during the work to keep the transaction alive.

Crow does not provide an error reporting mechanism (its only available reaction to low-level errors is to not send a response, which manifests as a timeout error at the host). It would probably be a good idea to define some kind of error response within your protocol so that a host can receive prompt notice of errors.

If the 31 device limit seems too low see the "Device Addresses" section for an idea of how an upper-level user protocol can expand the address space.


Admin Commands
==============

Admin commands are for administration of the Crow level. Some admin commands are generic and apply to all implementations. Admin protocols 0-15 have been reserved for such commands.

Admin protocol 0 is defined in this specification (see below). It has two commands: ping and getDeviceInfo. Other protocols may be defined separately.

Other admin commands may be specific to an implementation (e.g. changing the baudrate). It is recommended that implementations use their implementationID number as the protocol number for such admin commands. For example, admin protocol 0x8050 could be used to administer the "PropCR-Fast" implementation.


Admin Command: ping
===================

The ping command has the following parameters:
    - address: any non-broadcast address (1-31)
    - muted responses: no
    - type: admin
    - protocol: 0
    - payload: empty

The ping response has the following parameters:
    - final: yes (no intermediate responses)
    - payload: empty


Admin Command: getDeviceInfo 
============================

The getDeviceInfo command has the following parameters:
    - address: any non-broadcast address (1-31)
    - muted responses: no
    - type: admin
    - protocol: 0
    - payload: 0x00 (a single NUL byte)

The getDeviceInfo response has the following parameters:
    - final: yes (no intermediate responses)
    - payload: 8-1028 bytes, in the format below

    pos         length      field/value
    0           1           0x00
    1           1           implementation's crow specification version (currently 0x01)
    2           2           implementation's ID
    4           2           device's max command payload length
    6           1           the number of supported admin protocols A (0-255)
    7           1           the number of supported user protocols U (0-255)
    8           2*A         list of supported admin protocols (any order, no redundancies)
    8 + 2*A     2*U         list of supported user protocols (any order, no redundancies)

All multibyte integer values are sent MSB first.

The implementation ID is a two byte number that can be used to identify the Crow implementation being used by the device. For example, 0x8050 identifies "PropCR-Fast", a Crow implementation for the Parallax Propeller that is optimized for speed.

Note that the max payload length is a two byte value, even though Crow v1 limits it to ll bits (2047). Future specifications may allow for larger payloads (up to 65535).


Future Developments
===================

Here are some possible improvements under consideration for Crow v2 (assuming it ever exists):
    - A CRC option for more robust error detection.
    - Additional admin commands to obtain more detailed information about devices (names, descriptions, firmware versions, uptime, serial number, boot counts, etc.), and also possibly system level integration (set time, etc.).

